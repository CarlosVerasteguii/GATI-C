generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  password_hash String
  role          UserRole      @default(LECTOR)
  trusted_ip    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  auditLogs     AuditLog[]
  pendingTasks  PendingTask[]
}

model Product {
  id            String     @id @default(cuid())
  name          String
  serial_number String?    @unique
  description   String?
  cost          Float?
  purchase_date DateTime?
  condition     String?
  brandId       String?
  categoryId    String?
  locationId    String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  documents     Document[]
  brand         Brand?     @relation(fields: [brandId], references: [id])
  category      Category?  @relation(fields: [categoryId], references: [id])
  location      Location?  @relation(fields: [locationId], references: [id])

  @@index([brandId], map: "Product_brandId_fkey")
  @@index([categoryId], map: "Product_categoryId_fkey")
  @@index([locationId], map: "Product_locationId_fkey")
}

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Location {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Document {
  id                   String    @id @default(cuid())
  original_filename    String
  stored_uuid_filename String
  productId            String
  deleted_at           DateTime?
  createdAt            DateTime  @default(now())
  product              Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "Document_productId_fkey")
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String
  action       String
  target_type  String
  target_id    String
  changes_json Json
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "AuditLog_userId_fkey")
}

model PendingTask {
  id           String         @id @default(cuid())
  creatorId    String
  type         String
  status       String
  details_json Json
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  creator      User           @relation(fields: [creatorId], references: [id])
  taskAudit    TaskAuditLog[]

  @@index([creatorId], map: "PendingTask_creatorId_fkey")
}

model TaskAuditLog {
  id        String      @id @default(cuid())
  taskId    String
  userId    String
  event     String
  details   String?
  createdAt DateTime    @default(now())
  task      PendingTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId], map: "TaskAuditLog_taskId_fkey")
}

enum UserRole {
  ADMINISTRADOR
  EDITOR
  LECTOR
}
