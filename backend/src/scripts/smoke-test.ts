import 'reflect-metadata';
import { container } from 'tsyringe';
import { AuthService } from '../modules/auth/auth.service.js';
import prisma from '../config/prisma.js';
import { RegisterUserData } from '../types/auth.types.js';

/**
 * Script de Smoke Test para verificar la integraci√≥n b√°sica del backend
 * Prueba el flujo completo de registro de usuario contra la base de datos real
 */
async function main() {
    console.log('üöÄ --- Iniciando Smoke Test del Backend ---');
    console.log('üìä Probando integraci√≥n con base de datos MySQL via Prisma...');

    // Resolver AuthService desde el contenedor de tsyringe
    const authService = container.resolve(AuthService);
    console.log('‚úÖ AuthService resuelto exitosamente desde el contenedor IoC');

    // Datos de prueba para el usuario
    const testUserData: RegisterUserData = {
        email: `test-${Date.now()}@example.com`,
        name: 'Test User',
        password: 'password123',
    };

    console.log('üë§ Datos de prueba:', {
        email: testUserData.email,
        name: testUserData.name,
        password: '[PROTECTED]'
    });

    try {
        console.log('üîê Intentando registrar nuevo usuario...');
        const result = await authService.registerUser(testUserData);

        console.log('‚úÖ √âxito: Usuario registrado exitosamente');
        console.log('üë§ Usuario creado:', {
            id: result.user.id,
            name: result.user.name,
            email: result.user.email,
            role: result.user.role,
            isActive: result.user.isActive,
            createdAt: result.user.createdAt
        });
        console.log('üîë Token JWT generado:', result.token.substring(0, 50) + '...');

        console.log('üîç Verificando persistencia en la base de datos...');
        const dbUser = await prisma.user.findUnique({
            where: { email: testUserData.email }
        });

        if (dbUser) {
            console.log('‚úÖ Verificaci√≥n en DB exitosa:');
            console.log('üë§ Usuario encontrado en DB:', {
                id: dbUser.id,
                name: dbUser.name,
                email: dbUser.email,
                role: dbUser.role,
                isActive: dbUser.isActive,
                createdAt: dbUser.createdAt
            });

            // Verificar que el hash de contrase√±a est√© presente pero no sea el mismo que la original
            if (dbUser.passwordHash && dbUser.passwordHash !== testUserData.password) {
                console.log('üîí Hash de contrase√±a correctamente almacenado y hasheado');
            } else {
                throw new Error('El hash de contrase√±a no se almacen√≥ correctamente');
            }

            console.log('üéâ ¬°Smoke Test PASADO! El backend puede crear y persistir usuarios correctamente.');

        } else {
            throw new Error('El usuario no se encontr√≥ en la base de datos despu√©s del registro.');
        }

    } catch (error) {
        console.error('‚ùå Error en el Smoke Test:', error);

        // Informaci√≥n adicional para debugging
        if (error instanceof Error) {
            console.error('üìã Detalles del error:', {
                name: error.name,
                message: error.message,
                stack: error.stack
            });
        }

        // Verificar estado de la conexi√≥n a la base de datos
        try {
            await prisma.$queryRaw`SELECT 1 as test`;
            console.log('‚úÖ La conexi√≥n a la base de datos est√° funcionando');
        } catch (dbError) {
            console.error('‚ùå Error de conexi√≥n a la base de datos:', dbError);
        }

        process.exit(1);

    } finally {
        console.log('üîå Desconectando de la base de datos...');
        await prisma.$disconnect();
        console.log('--- Smoke Test Finalizado ---');
    }
}

// Ejecutar el script si se llama directamente
main().catch((error) => {
    console.error('‚ùå Error fatal en el script:', error);
    process.exit(1);
});

export default main;
