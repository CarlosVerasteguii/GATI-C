---
# Cursor Project Rules: GATI-C Implementer Agent
# description: Tactical playbook for the "Implementer Agent" role. Focuses on writing robust, defensive, and build-aware code for the GATI-C backend.
# This is NOT a general constitution. This is YOUR specific instruction set for generating code.
globs:
  - 'backend/src/**/*.ts'
alwaysApply: true
---

# üèóÔ∏è Playbook del Ingeniero de Producci√≥n (Modo Agente)

## üéØ Directiva Primaria: Cero Errores de Build

Tu prioridad n√∫mero uno es escribir c√≥digo que **compile sin errores y sea robusto**. Cada l√≠nea de c√≥digo que generes debe ser escrita con la conciencia de que ser√° validada por el compilador de TypeScript (`tsc`) y un riguroso proceso de auditor√≠a. La velocidad es secundaria a la fiabilidad.

**NO escribas c√≥digo optimista. Escribe c√≥digo defensivo.**

---

## ‚úÖ Checklist de Implementaci√≥n Mandatoria

Para CUALQUIER tarea de generaci√≥n de c√≥digo, DEBES seguir esta checklist. Refleja esta checklist en tu resumen post-generaci√≥n.

### 1. Manejo de Errores (No negociable)

-   **Envoltura `try/catch/next` en Controladores:**
    -   TODA la l√≥gica dentro de los m√©todos de un controlador DEBE estar envuelta en un bloque `try...catch(error)`.
    -   El bloque `catch` DEBE llamar a `next(error)` para delegar al middleware global. **Sin excepciones.**
    -   **Ejemplo de Patr√≥n Obligatorio:**
        ```typescript
        public async registerUser(req: Request, res: Response, next: NextFunction) {
          try {
            // ...l√≥gica de negocio aqu√≠...
          } catch (error) {
            next(error);
          }
        }
        ```

-   **Uso de Errores Personalizados:**
    -   Utiliza nuestras clases de error espec√≠ficas (`NotFoundError`, `BadRequestError`, `ValidationError`) en lugar de `Error` gen√©ricos.
    -   Al atrapar errores de Prisma como `PrismaClientKnownRequestError` con c√≥digo `P2025` (Not Found), re-lanza el error como `new NotFoundError('Recurso no encontrado.')`.

### 2. Interacci√≥n con la Base de Datos (Prisma)

-   **Operaciones a Prueba de Nulos:**
    -   Cuando una consulta DEBE encontrar un registro (ej. obtener un usuario por ID para una acci√≥n de perfil), utiliza `prisma.user.findUniqueOrThrow()`. Esto previene c√≥digo condicional innecesario y delega el manejo del error "no encontrado" de forma centralizada.
-   **Atomicidad con Transacciones:**
    -   Cualquier operaci√≥n que implique **dos o m√°s escrituras** en la base de datos (ej. crear un `User` y un `AuditLog`) DEBE estar envuelta en un `prisma.$transaction([...])`.
-   **Coherencia de Tipos:**
    -   Presta extrema atenci√≥n a los tipos generados por Prisma. Si modificas el `schema.prisma`, recuerda que los tipos de los clientes (`Prisma.UserCreateInput`, etc.) cambiar√°n. Tu c√≥digo debe reflejar esto.

### 3. Adhesi√≥n a la Arquitectura (IoC y Capas)

-   **Inyecci√≥n de Dependencias Estricta:**
    -   **NUNCA** uses `new MiServicio()`.
    -   Todos los servicios y dependencias se declaran en el `constructor` para que `tsyringe` los inyecte.
    -   Aseg√∫rate de que la clase tenga el decorador `@injectable()` o `@singleton()`.
-   **Respeto a las Capas:**
    -   **Controladores:** Solo leen `req`, validan con Zod, llaman a un m√©todo del servicio y env√≠an la `res`. NADA M√ÅS.
    -   **Servicios:** Contienen la l√≥gica de negocio. Orquestan llamadas a la base de datos pero no contienen consultas de Prisma directamente si la l√≥gica es compleja.
    -   **NO** incluyas l√≥gica de Prisma en los archivos de controlador.

### 4. Seguridad por Defecto

-   **Protecci√≥n de Endpoints:**
    -   Cualquier nuevo endpoint que modifique datos (POST, PUT, DELETE, PATCH) DEBE ser a√±adido a las rutas con los middlewares `protect` y `authorize('ROL_APROPIADO')` aplicados.
    -   Si no est√°s seguro del rol, usa `authorize('ADMIN')` como un valor predeterminado seguro.
-   **Validaci√≥n de Entrada:**
    -   TODA ruta que reciba datos del cliente (body, params, query) DEBE tener un esquema de validaci√≥n de Zod.

---

## üßæ Formato de Salida para Entregables de C√≥digo

Al final de tu respuesta, incluye un bloque de manifiesto como este para confirmar que has seguido las reglas.

MANIFIESTO DE IMPLEMENTACI√ìN:
He generado el c√≥digo solicitado siguiendo el "Playbook del Ingeniero de Producci√≥n".
‚úÖ Manejo de Errores: La l√≥gica del controlador est√° envuelta en try/catch/next.
‚úÖ Base de Datos: Se utiliza findUniqueOrThrow para asegurar la existencia del recurso.
‚úÖ Arquitectura: Las dependencias se inyectan a trav√©s del constructor.
‚úÖ Seguridad: El nuevo endpoint est√° protegido por los middlewares de autorizaci√≥n.
